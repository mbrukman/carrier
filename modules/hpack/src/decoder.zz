using <stdio.h>::{printf};
using <string.h>::{strlen};
using err;
using slice::{Slice};
using <string.h>::{memcpy};

const usize DYNSIZE = 16;

struct Entry {
    Slice key;
    Slice val;
}



enum Repr {
    Indexed,
    LiteralWithIncrementalIndexing,
    SizeUpdate,
    LiteralNeverIndexed,
    LiteralWithoutIndexing,
}

fntype callback(err::Err+et mut*e, void mut*user, Slice *key, Slice *val);


fn get_repr(u8 b) -> Repr {
    if (b & 128) == 128 {
        return Repr::Indexed;
    } else if (b & 192) == 64 {
        return Repr::LiteralWithIncrementalIndexing;
    } else if (b & 32) == 32 {
        return Repr::SizeUpdate;
    } else if (b & 16) == 16 {
        return Repr::LiteralNeverIndexed;
    } else {
        return Repr::LiteralWithoutIndexing;
    }
}

pub fn decode_integer(Iterator mut* self, err::Err+et mut*e, u8 prefix_size) -> uint
    where err::checked(*e)
    where prefix_size > 0
    where prefix_size < 9
{

    // Make sure there's no overflow in the shift operation
    u8 mut mask = 0xff;
    if prefix_size < 8 {
        mask = (1 << prefix_size) - 1;
    }

    static_attest(len(self->wire.mem) > self->at);
    uint mut value = as<uint>((self->wire.mem[self->at] & mask));
    (self->at)++;

    // Value fits in the prefix bits.
    if value < as<uint>(mask) {
        return value;
    }


    usize mut consumed = 1;
    // The value does not fit into the prefix bits, so we read as many following
    // bytes as necessary to decode the integer.
    u8 mut m = 0;

    for (; self->at < self->wire.size; (self->at)++) {


        consumed += 1;
        static_attest(len(self->wire.mem) > self->at);
        u8 b = self->wire.mem[self->at];
        value += as<uint>((b & 127) * (1 << m));
        m += 7;

        if (b & 128) != 128 {
            (self->at)++;
            return value;
        }

        // The octet limit is chosen such that the maximum allowed *value* can
        // never overflow an unsigned 32-bit integer. The maximum value of any
        // integer that can be encoded with 5 octets is ~2^28
        if consumed >= 5 {
            err::fail(e, 15, "integer overflow");
            return 0;
        }

    }

    static_attest(err::checked(*e));
    err::fail(e, 15, "eof");
    return 0;
}



fn decode_literal(Iterator mut* self, err::Err+et mut*e, bool index) -> bool
    where err::checked(*e)
{

    u8 mut prefix;
    if index {
        prefix = 6;
    } else {
        prefix = 4;
    }
    static_attest(prefix == 4 || prefix == 6);

    uint x = self->decode_integer(e, prefix);
    if err::check(e) {
        return false;
    }
    if self->wire.size <= self->at  {
        err::fail(e, 15, "eof");
        return false;
    }
    static_attest(self->wire.size  > self->at);

    if x == 0 {
        uint strlen1 = self->decode_integer(e, 7);
        if err::check(e) {
            return false;
        }
        if (self->at  + (usize)strlen1) >= self->wire.size {
            err::fail(e, 15, "eof");
            return false;
        }
        static_attest(len(self->wire.mem) > self->at);
        self->key = Slice {
            mem:    (self->wire.mem + self->at),
            size:   (usize)strlen1,
        };
        self->at  += (usize)strlen1;
    } else if x > 0 && (usize)x < static(len(STATIC_KEYS)) {
        self->key = Slice {
            mem:    (u8*)STATIC_KEYS[(usize)x],
            size:   (usize)strlen(STATIC_KEYS[(usize)x]),
        };
    } else if x > 61 && x < 76 {
        usize di = (usize)x - 61;
        Entry *de = &(self->dyn[di]);
        self->key = de->key;
    } else {
        err::fail(e, 1, "%u not implemented", x);
        return false;
    }

    static_attest(err::checked(*e));
    uint strlen2 = self->decode_integer(e, 7);
    if err::check(e) {
        return false;
    }
    if (self->at  + (usize)strlen2) > self->wire.size {
        err::fail(e, 15, "eof");
        return false;
    }

    static_attest(len(self->wire.mem) > self->at);
    self->val = Slice {
        mem:    (self->wire.mem + self->at),
        size:   (usize)strlen2,
    };

    if index {
        for (usize mut i = 0; i < DYNSIZE; i++) {
            if (self->dyn[i]).key.mem == 0 {
                (self->dyn[i]).key = self->key;
                (self->dyn[i]).val = self->val;
            }
        }
    }

    self->at += (usize)strlen2 ;
    return true;
}



export struct Iterator {
    Slice   key;
    Slice   val;

    Slice   wire;
    usize   mut at;
    Entry mut dyn[DYNSIZE];
}

export fn decode(Slice wire) -> Iterator
{
    return Iterator {
        wire: wire,
        at:   0,
    };
}

export fn next(Iterator mut *self, err::Err+et mut*e) -> bool
    where err::checked(*e)
    model len(self->key.mem) >= self->key.size
    model len(self->val.mem) >= self->val.size
{

    self->key = Slice{mem:0};
    self->val = Slice{mem:0};
    static_attest(len(self->key.mem) >= self->key.size);
    static_attest(len(self->val.mem) >= self->val.size);

    for (; self->at < self->wire.size ; self->at += 1) {
        static_attest(self->at < len(self->wire.mem));
        switch get_repr(self->wire.mem[self->at]) {
            Repr::Indexed => {
                uint x = self->decode_integer(e, 7);
                if err::check(e) {
                    return false;
                }

                if x > 0 && (usize)x < static(len(STATIC_KEYS)) {
                    self->key = Slice {
                        size:   (usize)strlen(STATIC_KEYS[(usize)x]),
                        mem:    (u8*)STATIC_KEYS[(usize)x],
                    };
                    self->val = Slice {
                        size:   (usize)strlen(STATIC_VALS[(usize)x]),
                        mem:    (u8*)STATIC_VALS[(usize)x],
                    };
                    return true;
                } else if x > 61 && x < 76 {
                    usize di = (usize)x - 61;
                    self->key = self->dyn[di].key;
                    self->val = self->dyn[di].val;
                    return true;
                } else {
                    err::fail(e, 1, "%u not implemented", x);
                    return false;
                }
            }
            Repr::LiteralWithIncrementalIndexing => {
                return self->decode_literal(e, true);
            }
            Repr::SizeUpdate => {
                err::fail(e, 1, "Repr::SizeUpdate not implemented");
                return false;
            }
            Repr::LiteralNeverIndexed => {
                return self->decode_literal(e, false);
            }
            Repr::LiteralWithoutIndexing => {
                return self->decode_literal(e, false);
            }
        }
    }
    return false;
}



static char* STATIC_KEYS[] = {
    0,
    ":authority",
    ":method",
    ":method",
    ":path",
    ":path",
    ":scheme",
    ":scheme",
    ":status",
    ":status",
    ":status",
    ":status",
    ":status",
    ":status",
    ":status",
    "accept-charset",
    "accept-encoding",
    "accept-language",
    "accept-ranges",
    "accept",
    "access-control-allow-origin",
    "age",
    "allow",
    "authorization",
    "cache-control",
    "content-disposition",
    "content-encoding",
    "content-language",
    "content-length",
    "content-location",
    "content-range",
    "content-type",
    "cookie",
    "date",
    "etag",
    "expect",
    "expires",
    "from",
    "host",
    "if-match",
    "if-modified-since",
    "if-none-match",
    "if-range",
    "if-unmodified-since",
    "last-modified",
    "link",
    "location",
    "max-forwards",
    "proxy-authenticate",
    "proxy-authorization",
    "range",
    "referer",
    "refresh",
    "retry-after",
    "server",
    "set-cookie",
    "strict-transport-security",
    "transfer-encoding",
    "user-agent",
    "vary",
    "via",
    "www-authenticate",
};

static char* STATIC_VALS[] = {
    0,
    "",
    "GET",
    "POST",
    "/",
    "/index.html",
    "http",
    "https",
    "200",
    "204",
    "206",
    "304",
    "400",
    "404",
    "500",
    "",
    "gzip, deflate",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
    "",
};




