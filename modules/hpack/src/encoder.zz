using err;
using <string.h>::{strlen, memcpy};
using slice;

export fn encode(slice::MutSlice mut* slice, err::Err+et mut *e, u8* key, usize keylen, u8* val, usize vallen)
    @solver = yices2
    where len(key)    >= keylen
    where len(val)    >= vallen
    where err::checked(*e)
{
    if slice->at >= slice->slice.size || slice->at + 1 >= slice->slice.size {
        err::fail(e, 1, "overflow");
        return;
    }

    slice->mem()[slice->at] = 0;
    slice->at += 1;

    if slice->at + 1 >= slice->slice.size {
        err::fail(e, 1, "overflow");
        return;
    }

    slice->mem()[slice->at] = 0;
    static_attest(len(slice->slice.mem) > slice->at);
    encode_integer(slice, e, keylen, 7);
    if err::check(e) {
        return;
    }
    slice->at += 1;

    if slice->at + keylen >= slice->slice.size {
        err::fail(e, 1, "overflow");
        return;
    }
    memcpy(slice->mem() + slice->at, key, keylen);
    slice->at += keylen;

    slice->mem()[slice->at] = 0;
    encode_integer(slice, e, vallen, 7);
    if err::check(e) {
        return;
    }
    slice->at += 1;

    if slice->at >= slice->slice.size || slice->at >= slice->slice.size - vallen {
        err::fail(e, 1, "overflow");
        return;
    }

    memcpy(slice->mem() + slice->at, val, vallen);
    slice->at += vallen;
    static_attest(slice->at <= slice->slice.size);
}



pub fn encode_integer(slice::MutSlice mut* slice, err::Err+et mut *e, usize value, u8 prefix_size)
    where err::checked(*e)
{
    if slice->at >= slice->slice.size {
        err::fail(e, 10, "eof");
        return;
    }
    u8 mut mask = 0xff;
    if prefix_size < 8 {
        mask = (1 << prefix_size) - 1;
    }

    if value < (usize)mask {
        slice->mem()[slice->at] = slice->mem()[slice->at] & ~mask | (u8)value;
        return;
    }

    err::fail(e, 10, "large header field not implemented");
}
