//TODO actually bootstrap should be completely removed once trustvec distribution works and the fixed v4 space has been allocated

using <string.h>::{memcpy, memset};
using <stdlib.h>::{atoi, getenv};
using <stdio.h>::{printf, fopen, fclose, fread, FILE, fgetc, EOF};

using string;
using net::address;
using err;
using byteorder;
using net::udp;
using time;
using identity;
using io;
using net;
using identity_kit;

export const usize MAX_BROKERS = 16;

export struct Broker packed {
    u8 protocol;
    u8 reserved[3];
    u8 xaddr[32];
    u8 ip4addr[4];
    u8 ip6addr[16];
}

export struct Store {
    u8  version;
    u8  secret[32];
    u64 time;
    Broker broker[MAX_BROKERS];
}

export fn empty(Store mut new *self) {
    self->version =  1;
}

export fn load_ik(Store mut *self, err::Err+et mut * e, identity_kit::IdentityKit *ik)
    where err::checked(*e)
{
    //TODO principal != identity secret
    memcpy(self->secret, ik->principal.k, 32);
}

export fn get_identity(Store * self, identity::Identity mut*id) {
    identity::identity_from_secret(id, (identity::Secret*)&self->secret);
}

export fn sync(err::Err+et mut * e, Store mut* store, net::Engine *netengine, io::Async mut* async, time::Time timeout)
    where err::checked(*e)
{
    new bs = bootstrap(e, store, netengine, async);
    if err::check(e) { return; }
    io::await(async, e, poll, &bs, timeout);
    if err::check(e) { return; }
    bs.close();
}

export fn from_store(Broker *b, address::Address mut *ip4addr, address::Address mut *ip6addr, identity::Address mut *xaddr) -> bool {
    if b->protocol == 0 {
        return false;
    }
    address::set_ip(ip4addr, address::Type::Ipv4, b->ip4addr);
    address::set_ip(ip6addr, address::Type::Ipv6, b->ip6addr);
    memcpy(xaddr->k, b->xaddr, 32);
    return true;
}

export fn broker_count(Store * self) -> usize {
    usize mut c = 0;
    for (usize mut i = 0; i < MAX_BROKERS; i++) {
        if self->broker[i].protocol != 0 {
            c++;
        }
    }
    return c;
}


export struct Bootstrap {
    address::Address    dns_servers[16];
    usize               dns_servers_count;
    udp::Socket         sock4;
    udp::Socket         sock6;
    io::Io              mut retry_timer;
    Store               mut* store;
}

export fn bootstrap(Bootstrap mut new*self, err::Err+et mut * e, Store mut*store, net::Engine *netengine, io::Async mut* async)
    where err::checked(*e)
{
    self->store = store;

    address::from_cstr(self->dns_servers+0,"8.8.8.8:53");
    address::from_cstr(self->dns_servers+1,"1.1.1.1:53");
    address::from_cstr(self->dns_servers+2,"[2001:4860:4860::8888]:53");
    address::from_cstr(self->dns_servers+3,"[2620:119:35::35]:53");
    self->dns_servers_count = 4;

    get_system_dns_servers(self->dns_servers, &self->dns_servers_count);

    new addr4 = address::from_cstr("0.0.0.0:0");
    self->sock4 = netengine->new_udp(e, &addr4, async);
    if err::check(e) {
        return;
    }

    new addr6 = address::from_cstr("[::1]:0");
    self->sock6 = netengine->new_udp(e, &addr6, async);
    // ignore v6 creation error
    err::new(e);
}


export fn close(Bootstrap mut * self) {
    self->sock4.close();
    self->sock6.close();
}

export fn poll(Bootstrap mut * self, err::Err+et mut * e, io::Async mut* async) -> io::Result
    where err::checked(*e)
{
    string::String+1500 mut xbuf = {0};

    static_attest(self->dns_servers_count < len(self->dns_servers));

    string::String+10 mut tb = {0};
    if  !(self->retry_timer).valid() ||  (self->retry_timer).read(e, &tb) == io::Result::Ready {
        if err::check(e) {
            return io::Result::Error;
        }

        (self->retry_timer).close();
        self->retry_timer = io::timeout(async, e, time::from_seconds(1));
        if err::check(e) {
            return io::Result::Error;
        }
        async->select(e, &self->retry_timer, io::Ready::Read);
        if err::check(e) {
            return io::Result::Error;
        }


        char *fromenv = (char*)getenv("CARRIER_BROKER_DOMAINS");
        if fromenv != 0 {
            static_attest(safe(fromenv));
            static_attest(nullterm(fromenv));
            string::append_cstr(&xbuf, fromenv);
        } else {
            string::append_cstr(&xbuf, "4.carrier.devguard.io");
        }
        for (usize mut i = 0; i < self->dns_servers_count; i++) {
            switch self->dns_servers[i].type {
                address::Type::Invalid => {

                }
                address::Type::Ipv4 => {
                    send_query(e, &xbuf, &self->sock4, self->dns_servers + i);
                }
                address::Type::Ipv6 => {
                    send_query(e, &xbuf, &self->sock6, self->dns_servers + i);
                }
            }
            if err::check(e) {
                return io::Result::Error;
            }
        }
    }

    if err::check(e) {
        return io::Result::Error;
    }

    xbuf.clear();
    new from = address::none();
    if (self->sock6).recvfrom(e, &xbuf, &from) == io::Result::Ready {
        static_attest(safe(self->store));
        if parse_query(&xbuf, self->store) {
            return io::Result::Ready;
        }
    }
    if err::check(e) {
        return io::Result::Error;
    }

    xbuf.clear();
    if (self->sock4).recvfrom(e, &xbuf, &from) == io::Result::Ready {
        if parse_query(&xbuf, self->store) {
            return io::Result::Ready;
        }
    }
    if err::check(e) {
        return io::Result::Error;
    }

    return io::Result::Later;
}

struct DnsPacket packed {
    u16 id;
    u16 flags;
    u16 queries;
    u16 answers;
    u16 authorities;
    u16 additionals;
}

fn send_query(
        err::Err+et mut *e,
        string::String+st *name,
        udp::Socket mut*sock,
        address::Address *dns_server
    )
    where err::checked(*e)
{

    /*
    {
        string::String+100 mut dbg = {0};
        dns_server->to_string(&dbg);
        printf("sending to %.*s\n", dbg.len, dbg.mem);
    }
    */

    string::String+1000 mut pkt = {0};

    DnsPacket mut *head = (DnsPacket mut *)pkt.mem;

    head->id          = byteorder::to_be16(0x1337);
    head->flags       = byteorder::to_be16(0x100); //request recursion
    head->queries     = byteorder::to_be16(1);
    head->answers     = 0;
    head->authorities = 0;
    head->additionals = byteorder::to_be16(1);

    pkt.len += as<usize>(sizeof(DnsPacket));

    usize mut it = 0;
    string::String+256 mut part = {0};
    string::clear(&part);
    while (string::split(name, '.', &it, &part)) {
        if part.len >= 255 || (string::space(&part) < (1 + part.len)) {
            err::fail(e, 22, "name too long");
            return;
        }
        pkt.push((char)part.len);
        pkt.append(&part);
        part.clear();
    }
    static_attest(err::checked(*e));


    u8 end[] = {
        0,    //end of labels
        0,    //16bit padding
        0x10, //request TXT
        0,    //16bit padding
        1,    //inet class
        // opt
        0,              // root
        0,      0x29,   // type OPT
        0x03,   0xe8,   // 1000 bytes max response size
        0,    // dunno
        0,    // some other stuff
        0, 0, // security flags i thing
        0, 0, // no more data

    };
    string::append_bytes(&pkt, end, static(len(end)));

    static_attest(len(pkt.mem) >= pkt.len);

    udp::sendto(sock, e, &pkt, dns_server);
    //e->abort();
    // don't care if send failed
    err::new(e);
}

pub fn parse_query(string::String+t *pkt, Store mut*store) -> bool
{
    static_attest(len(pkt->mem) >= pkt->len);

    if pkt->len < as<usize>(sizeof(DnsPacket)) {
        return false;
    }

    DnsPacket mut *head = (DnsPacket mut *)pkt->mem;
    usize answers = (usize)byteorder::from_be16(head->answers);
    usize queries = (usize)byteorder::from_be16(head->queries);

    if answers < 1 {
        return false;
    }

    usize mut at = as<usize>(sizeof(DnsPacket));

    // skip the query sections
    for (usize mut i = 0; i < queries; i++) {
        while at < pkt->len - 1 {
            static_attest(at < len(pkt->mem));
            // find end of labels
            if (pkt->mem)[at] == 0 {
                // from here the section is 5 more bytes long
                at += 5;
                break;
            }
            at += 1;
        }
    }


    usize mut storepos = 0;

    for (usize mut i = 0; i < answers; i++) {
        // find start of answer header
        while at < pkt->len - 1 {
            static_attest(at < len(pkt->mem));
            if (pkt->mem)[at] == 0 {
                break;
            }
            if as<u8>((pkt->mem)[at]) == 0xc0 {
                at += 1;
                break;
            }
            at += 1;
        }
        at += 1;

        if at + 2 >= pkt->len {
            break;
        }
        static_attest(at < len(pkt->mem));

        u16 record_type = byteorder::from_be16(*as<u16*>(&(pkt->mem)[at]));
        at += 2;

        if at + 6 >= pkt->len {
            break;
        }
        static_attest(at < len(pkt->mem));
        u16 record_class = byteorder::from_be16(*as<u16*>(&(pkt->mem)[at]));
        at += 6;

        if at + 2 >= pkt->len {
            break;
        }
        static_attest(at < len(pkt->mem));
        u16 record_len = byteorder::from_be16(*as<u16*>(&(pkt->mem)[at]));
        at += 2;

        if at + (usize)record_len + 1 >= pkt->len {
            break;
        }
        static_attest(at + 1 < len(pkt->mem));

        if record_type == 0x10 && record_class == 0x01 {
            string::String+200 mut record ={0};

            u8 *rm = (u8*)pkt->mem;
            static_attest(at + 1 < len(rm));
            u8 * record_b = rm + (at + 1);
            static_attest(len(record_b) == (usize)record_len - 1);
            static_attest(safe(record_b));
            string::append_bytes(&record, record_b, (usize)record_len - 1);

            bool parseok = parse_record(&record, store->broker + storepos);
            static_attest(storepos < len(store->broker));
            if ((store->broker)[storepos]).protocol >0 && parseok {
                storepos += 1;
                if storepos > MAX_BROKERS {
                    return true;
                }
            } else {
                static_attest(storepos < len(store->broker));
                memset(&(store->broker)[storepos], 0, sizeof(Broker));
            }

        }
        at += (usize)record_len;
    }

    return storepos != 0;
}


pub fn parse_record(string::String+st * record, Broker mut *entry) -> bool {
    err::Err+1 mut e;
    err::new(&e);

    bool mut has_netaddr = false;
    bool mut has_xaddr   = false;

    usize mut it = 0;
    string::String+256 mut part = {0};
    string::clear(&part);
    while (string::split(record, ' ', &it, &part)) {
        if string::starts_with_cstr(&part, "n=") {
            char *from = part.mem + 2;
            usize fromlen = part.len - 2;
            static_attest(safe(from));
            static_attest(len(from) >= fromlen);

            new a = address::from_str(from, fromlen);
            if a.valid() {
                memcpy(entry->ip4addr, address::get_ip(&a), 4);
                has_netaddr = true;
            }
        } else if string::starts_with_cstr(&part, "n6=") {
            char *from = part.mem + 3;
            usize fromlen = part.len - 3;
            static_attest(safe(from));
            static_attest(len(from) >= fromlen);

            new mut a = address::from_str(from, fromlen);
            if a.valid() {
                memcpy(entry->ip6addr, address::get_ip(&a), 16);
                has_netaddr = true;
            }
        } else if string::starts_with_cstr(&part, "x=") {
            char *from = part.mem + 2;
            usize fromlen = part.len - 2;
            static_attest(safe(from));
            static_attest(fromlen  <= len(from));

            identity::Address mut addr = {0};
            identity::address_from_str (&e,  &addr, from, fromlen);
            if !err::check(&e) {
                memcpy(entry->xaddr, addr.k, sizeof(entry->xaddr));
                has_xaddr = true;
            }
            err::new(&e);
        } else if string::starts_with_cstr(&part, "carrier=") {
            char *from = part.mem + 8;
            usize fromlen = part.len - 8;
            static_attest(safe(from));
            static_attest(fromlen == len(from));

            string::String+20 mut bb = {0};
            string::append_bytes(&bb, (u8*)from, fromlen);

            entry->protocol = (u8)atoi(bb.mem);
        } else if string::starts_with_cstr(&part, "c=") {
            char *from = part.mem + 2;
            usize fromlen = part.len - 2;
            static_attest(safe(from));
            static_attest(fromlen == len(from));

            string::String+20 mut bb = {0};
            string::append_bytes(&bb, (u8*)from, fromlen);

            entry->protocol = (u8)atoi(bb.mem);
        }

        string::clear(&part);
    }

    return has_netaddr && has_xaddr && entry->protocol != 0;
}

fn get_system_dns_servers(address::Address mut *dns_servers, usize mut *at)
{
    FILE mut* fp = fopen("/etc/resolv.conf", "r");
    if fp == 0 {
        return;
    }
    static_attest(safe(fp));

    string::String+300 mut str;
    for (;;) {
        if *at >= 16 {
            break;
        }
        static_attest(*at < len(dns_servers));

        string::clear(&str);
        if !string::fgets(&str, fp) {
            break;
        }
        string::pop(&str);

        if string::starts_with_cstr(&str, "nameserver") {
            string::String+100 mut sub = {0};
            string::substr(&str, 11, 0, &sub);


            address::from_string(dns_servers + *at, &sub);
            if (dns_servers[*at]).valid() {
                (dns_servers[*at]).set_port(53);
                *at += 1;
            }
        }
    }
    fclose(fp);
}
