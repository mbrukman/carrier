using <stdint.h>::{uint8_t};
using <stdint.h>::{size_t};
using <string.h>::{memcpy, memcmp};
using <assert.h>::{assert};
using "../3rdparty/hacl-star/snapshots/hacl-c/Hacl_Ed25519.h" as ed25519;
using "../3rdparty/hacl-star/snapshots/hacl-c/Hacl_Curve25519.h" as x25519;
using "../3rdparty/hacl-star/snapshots/hacl-c/Hacl_Ed25519.h" as ed25519;

using (needs size_t) "../3rdparty/libbase58/libbase58.h" as b58;
using err;
using crc8;
using rand;
using string;

export struct Secret    { u8 k[32]; };
export struct Address   { u8 k[32]; };
export struct Identity  { u8 k[32]; };
export struct Signature { u8 k[64]; };

fn from_str(usize size, err::Err+et mut* e, u8 mut* to, char* from, usize l, u8 expect_type)
    where l <= len(from)
    where size == 64 || size == 32
    where len(to) >= size
    where err::checked(*e)
{
    u8 mut b[64 + 3] = {0};
    usize mut bs = size + 3;
    if !as<bool>(b58::b58tobin(b, &bs, from, l)) {
        err::fail(e, 22, "invalid bs58");
        return;
    }
    static_attest(err::checked(*e));

    if (b[0] != 8 && b[0] != 9) {
        err::fail(e, 22, "invalid version %d", b[0]);
        return;
    }
    static_attest(err::checked(*e));


    usize s2 = size + 2;

    u8 mut crc = 0;
    if b[0] == 8 {
        crc = crc8::broken_crc8(0, b, s2);
    } else {
        crc = crc8::crc8(0, b, s2);
    }

    if (crc != b[s2]) {
        err::fail(e, 22, "invalid checksum. %d != %d\n", b[34], crc);
        return;
    }
    static_attest(err::checked(*e));

    if (b[1] != expect_type) {
        err::fail(e, 22, "expected identity type %d got %d\n", expect_type, b[1]);
        return;
    }

    memcpy(to, b + 2, size);
    nullcheck(e, to);
}

fn to_str(usize size, err::Err+et mut* e, char mut* mut to, usize mut l, u8 version, u8 typ, u8* k) -> usize
    where err::checked(*e)
    where len(to) >= l && l > 0
    where size == 32 || size == 64
    model nullterm(to)
{
    u8 static zero[64] = { 0 };
    if (as<int>(memcmp(zero, k, size)) == 0) {
        err::fail(e, 22, "invalid address: zero");
        static_attest(nullterm(to));
        return 0;
    }

    u8 mut b[64 + 3] = {0};
    b[0] = version;
    b[1] = typ;
    memcpy(b + 2, k, size);

    usize s2 = size + 2;
    if version == 8 {
        b[s2] = crc8::broken_crc8(0, b, s2);
    } else {
        b[s2] = crc8::crc8(0, b, s2);
    }

    static_attest(err::checked(*e));

    //l -= 1;
    if (!as<bool>(b58::b58enc(to, &l, b, size + 3))) {
        err::fail(e, 22, "invalid bs58");
        return 0;
    }

    //b58enc already adds a zero
    l -= 1;
    //to[l] = 0;
    return l;
}

export fn identity_from_str (err::Err+et mut* e,  Identity mut* to, char* from, usize l)
    where err::checked(*e)
    where l <= len(from)
{
    from_str(32, e, to->k, from, l, 9);
}

export fn address_from_str (err::Err+et mut* e,   Address mut* to, char* from, usize l)
    where err::checked(*e)
    where l <= len(from)
{
    from_str(32, e, to->k, from, l, 6);
}

export fn secret_from_str (err::Err+et mut* e,    Secret mut* mut to, char* from, usize l)
    where err::checked(*e)
    where l <= len(from)
{
    from_str(32, e, to->k, from, l, 3);
}

export fn identity_to_str (err::Err+et mut* e,    char mut* to, usize l, Identity* from)  -> usize
    where err::checked(*e)
    where len(to) >= l && l > 0
    model nullterm(to)
{
    return to_str(32, e, to, l, 8, 9, from->k);
}

export fn identity_to_string (Identity* self, err::Err+et mut* e, string::String+st mut*str)
    where err::checked(*e)
{
    static_attest(str->len < len(str->mem));
    let ur = to_str(32, e, str->mem + str->len, st - str->len, 8, 9, self->k);
    str->len += ur;
}

export fn address_to_str (err::Err+et mut* e,     char mut* to, usize l, Address* from)  -> usize
    where err::checked(*e)
    where len(to) >= l && l > 0
    model nullterm(to)
{
    return to_str(32, e, to, l, 8, 6, from->k);
}

export fn secret_to_str (err::Err+et mut* e,      char mut* to, usize l, Secret* from) -> usize 
    where err::checked(*e)
    where len(to) >= l && l > 0
    model nullterm(to)
{
    return to_str(32, e, to, l, 8, 3, from->k);
}

export fn secret_generate (err::Err+et mut* e, Secret mut* to)
    where err::checked(*e)
{
    rand::rand(e, to->k, 32);
}

export fn signature_from_str (err::Err+et mut* e,  Signature mut* to, char* from, usize l)
    where err::checked(*e)
    where l <= len(from)
{
    from_str(64, e, to->k, from, l, 9);
}
export fn signature_to_str (err::Err+et mut* e,      char mut* to, usize l, Signature* from) -> usize
    where err::checked(*e)
    where len(to) >= l && l > 0
{
    return to_str(64, e, to, l, 8, 3, from->k);
}


export fn identity_from_secret (Identity mut* pk, Secret* sk) {
    err::Err+200 mut e;
    e.new();
    nullcheck(&e, sk->k);
    e.abort();

    ed25519::Hacl_Ed25519_secret_to_public(pk->k, (uint8_t mut*)(sk->k));
}

static uint8_t BASEPOINT [32]  = {9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0};

export fn address_from_secret (Address mut* pk, Secret* sk) {
    err::Err+200 mut e;
    e.new();
    nullcheck(&e, sk->k);
    e.abort();

    x25519::Hacl_Curve25519_crypto_scalarmult(pk->k, (u8 mut*)sk->k, (uint8_t mut*)(BASEPOINT));
}

export fn dh(Address mut *out, Secret* me, Address * them) {
    x25519::Hacl_Curve25519_crypto_scalarmult(out->k, (u8 mut *)(me->k), (u8 mut *)(them->k));
}

export fn sign(Secret *key, Signature mut *s, u8 * subject, usize subject_len) {
    err::Err+200 mut e;
    e.new();
    nullcheck(&e, key->k);
    e.abort();

    ed25519::Hacl_Ed25519_sign(s->k, (u8 mut* )key->k, (u8 mut* )subject, subject_len);
}

export fn verify(Identity *pk, Signature *s, u8 * subject, usize subject_len) -> bool{
    return (bool)ed25519::Hacl_Ed25519_verify((u8 mut* )pk->k, (u8 mut*)subject, subject_len, (u8 mut* )s->k);
}


export fn nullcheck(err::Err+et mut* e, u8 * k)
    where err::checked(*e)
    where len(k) >= 32
{
    u8 first = k[0];
    for (usize mut i = 1; i < 32; i++) {
        if first != k[i] {
            return;
        }
    }
    err::fail(e, 22, "invalid ed25519: 32 identical bytes");
    return;
}
